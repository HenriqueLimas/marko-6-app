<!-- Pokemon Grid -->
static function fetchPokemon({ signal, offset, searchQuery }) {
    const params = new URLSearchParams(location.search);

    if (searchQuery) {
        params.set("q", searchQuery);
    }

    if (offset) {
        params.set("offset", offset);
    }

    return fetch(`/?${params.toString()}`, {
        method: "GET",
        headers: {
            accept: "application/json",
        },
        signal,
    }).then((res) => res.json());
}

<const/pokemonRequest=(
    input.searchQuery || input.offset
        ? fetchPokemon({
              signal: $signal,
              offset: input.offset,
              searchQuery: input.searchQuery,
          })
        : input.pokemonRequest
)/>

<try>
    <@placeholder>
        <for to="50">
            <div class="pokemon-grid__skeleton"/>
        </for>
    </@placeholder>
    <@catch|error|>
        <log=error/>
    </@catch>
    <await|pokemons|=pokemonRequest>
        <for|pokemon| of=pokemons.results by="name">
            <pokemon pokemon=pokemon/>
        </for>

        <let/visible=false/>
        <if=visible && pokemons.offset>
            <pokemon-grid offset=pokemons.offset searchQuery=input.searchQuery/>
        </if>
        <else if=pokemons.offset>
            <div/visibleHint style="position:relative"/>
            <script>
                const observer = new IntersectionObserver((entries) => {
                    for (const entry of entries) {
                        if (entry.isIntersecting) {
                            visible = true;
                            break;
                        }
                    }
                });
                observer.observe(visibleHint());
                $signal.onabort = () => observer.disconnect();
            </script>
        </else>
    </await>
</try>

<style>
    .pokemon-grid__skeleton {
        width: 100%;
        height: 207px;
        background-color: #374151;
        border-radius: 0.5rem;
        animation: pulse 2s cubic-bezier(0.4, 0, 0.6, 1) infinite;
    }

    @keyframes pulse {
        0%,
        100% {
            opacity: 1;
        }
        50% {
            opacity: 0.5;
        }
    }
</style>
